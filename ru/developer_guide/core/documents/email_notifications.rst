********************
Почтовые уведомления
********************

.. note::

    Данный функционал появился с версии 4.4.1.

В новой версии CS-Cart добавлена возможность редактирования почтовых уведомлений в **панели администратора**. В качестве шаблонизатора используется библиотека `Twig <http://twig.sensiolabs.org/>`_, таким образом, в шаблоне уведомлений можно использовать все возможности, предоставляемые этой библиотекой. Для удобства все почтовые шаблоны разделены на **две группы**: **"Уведомления для администратора"** и **"Уведомления для покупателя"**. Почтовые уведомления, основанные на файловых шаблонах, также будут работать, т.е. обратная совместимость сохранена.

================
Структура данных
================

Для хранения шаблонов почтовых уведомлений используется таблица ``cscart_template_emails``. Таблица имеет следующую структуру:

.. list-table::
    :header-rows: 1
    :widths: 10 7 20
    
    *   - Название
        - Тип
	- Описание
    *   - template_id  
        - int 
	- Автоинкрементный идентификатор шаблона
    *   - code  
        - varchar(128) 
	- Символьный идентификатор шаблона
    *   - area 
        - сhar(1)  
	- Рабочая зона шаблона
    *   - status 
        - char(1) 
	- Статус шаблона
    *   - subject  
        - text  
	- Шаблон темы сообщения
    *   - template 
        - text  
	- Шаблон тела сообщения
    *   - default_subject  
        - text  
	- Шаблон по умолчанию для темы сообщения
    *   - default_template  
        - text 
	- Шаблон по умолчанию для тела сообщения
    *   - params_schema 
        - text  
	- Схема дополнительных параметров шаблона
    *   - params  
        - text  
	- Данные дополнительных параметров шаблона
    *   - updated  
        - int  
	- UNIX timestamp обновления
    *   - created 
        - int 
	- UNIX timestamp создания

=====================
Программный интерфейс
=====================

Для управления и взаимодействия с шаблонами почтовых уведомлений реализованы следующие классы:

* ``\Tygh\Template\Mail\Template`` — модель шаблона. Является программным представлением структуры шаблона в БД.

* ``\Tygh\Template\Mail\Repository`` — репозиторий шаблонов, класс реализует низкоуровневые методы получения/добавления/обновления/удаления шаблонов в БД. Экземпляр класса доступен из контейнера ``Tygh::$app[‘template.mail.repository’]``

* ``\Tygh\Template\Mail\Service`` — класс-сервис, реализует более высокоуровневые методы управления шаблонами. Экземпляр класса доступен из контейнера ``Tygh::$app[‘template.mail.service’]``

===================================
Схема отправки почтовых уведомлений
===================================

.. image:: img/invoice_editor_1.png
    :align: center
    :alt: New banner

1. Формирование данных для уведомления.
Этот этап не претерпел никаких значительных изменений, также как и раньше необходимо собрать все данные, которые будут доступны при формировании тела сообщения.

2.Вызов подсистемы отправителя.
Статический класс ``\Tygh\Mailer`` заменен на класс-сервис ``\Tygh\Mailer\Mailer``, который доступен из контейнера ``Tygh::$app['mailer']``. 
При вызове метода для отправки сообщения необходимо будет указать символьный идентификатор почтового сообщения, на основе которого будет сформировано тело сообщения, для этого используется ключ ``template_code``. 
Пример:

::
	
  $mailer->send(array(
      'to' => 'company_orders_department',
      'from' => 'default_company_orders_department',
      'data' => array(...)	
      /* Указание идентификатора почтового шаблона */
      'template_code' => 'call_requests_call_request',
      'tpl' => 'addons/call_requests/call_request.tpl',
      'company_id' => $company_id,
  ), 'A', $lang_code);


3. Определение типа почтового события.
Перед отправкой сообщения сервис ``\Tygh\Mailer\Mailer`` определяет, каким образом должно быть сформировано  тело сообщения. На данный момент есть 3 способа это сделать:

* Использовать шаблон из файла.
* Передать шаблон в параметрах.
* Использовать шаблон из БД.

4. Получение шаблона сообщения по идентификатору сообщения. 
С помощью класса ``\Tygh\Template\Mail\Repository`` получаем шаблон сообщения.
      
5. Формирование контекста и переменных сообщения. 
На основе данных, полученных в **пункте 1**, формируем контекст и доступные переменные почтового уведомления. В отличие от документов контекст и переменные в почтовых уведомлениях не разделены, это сделано для сохранения обратной совместимости.

6. Вызов шаблонизатора для формирования отображения тела сообщения.

7. Конвертация CSS стилей в **inline**.

8. Вызов низкоуровневого метода отправки сообщения. 
На этом этапе сформированные данные передаются в **библиотеку PHPMailer**, которая и занимается непосредственно отправкой сообщения.

========================================
Добавление шаблона почтового уведомления
========================================

Для добавления шаблона почтового уведомления необходимо воспользоваться классом-сервисом ``\Tygh\Template\Mail\Service``.

Пример:

::

  /** @var \Tygh\Template\Mail\Service $service */
  $service = Tygh::$app['template.mail.service'];

  $service->createTemplate(array(
      'code' => 'new_notification',
      'area' => 'C',
      'status' => 'A',
      'subject' => '{{ __("new_notification_subject") }}',
      'template' => '{{ snippet("header") }} <br/> Dear {{ customer_name }}! <br/> ... <br/> {{ snippet("footer") }}',
  ));

===============================
Расширение почтовых уведомлений
===============================

PHP хуки:

* ``template_email_get_name - fn_set_hook('template_email_get_name', $this, $name)`` — вызывается после формирования названия шаблона почтового уведомления,  с помощью хука можно изменить название.

* ``mailer_send_pre - fn_set_hook('mailer_send_pre', $this, $transport, $message, $area, $lang_code)`` — вызывается перед отправкой сообщения, этим хуком есть возможность повлиять на содержимое сообщения.

* ``mailer_send_post - fn_set_hook('mailer_send_post', $this, $transport, $message, $result, $area, $lang_code)`` — вызывается после отправки сообщения.

================================
Дополнительные параметры шаблона
================================

Любой шаблон почтового уведомления может содержать дополнительные параметры, которые впоследствии можно обработать в хуке ``mailer_send_pre``. Схема дополнительных параметров хранится в поле ``params_schema`` и представляет из себя следующую структуру:

::

  array(
       "var_name" => array(
           "type" => "checkbox",
           "title" => "param_title",
           "description" => "param_description"
       ),
       "var_name1" => array(
           "type" => "checkboxes",
           "title" => "param_title",
           "description" => "param_description",
           "variants" => array(
               "variant_key" => "variant_name"
          )
       ),
       "var_name2" => array(
           "type" => "checkboxes",
           "title" => "param_title",
           "description" => "param_description",
           "func" => "fn_get_params_variants"
       ),
  )

Где:

* ``"var_name"`` — имя переменной, по которому будет сохраняться значение.
* ``"type"`` — тип переменной, доступны: *checkbox*, *checkboxes*, *textarea*, *input*.
* ``"title"`` — название языковой переменной, которая будет использована в качестве названия для поля.
* ``"description"`` — название языковой переменной, которая будет использована в качестве подсказки для поля.
* ``"variants"`` — массив вариантов, для параметра типа ``checkboxes``.
* ``"func"`` — функция для формирования массива вариантов, для параметра типа ``checkboxes``.

Сохраненные значения будут доступны в свойстве модели шаблона почтового уведомления.

С помощью дополнительных параметров реализована возможность прикрепления "invoice" документа к почтовым уведомлениями о смене статуса заказа. На странице редактирования шаблона выведен чекбокс, в пре хуке ``mailer_send_pre`` обрабатывается значение этого чекбокса, в случае, если чекбокс активен, к почтовому сообщению прикрепляется pdf-файл. Схема переменных в этом случае выглядит следующим образом:

::

  array(
       "attach_invoice": array(
           "type": "checkbox",
           "title": "email_template.params.attach_invoice"
       )
  )

