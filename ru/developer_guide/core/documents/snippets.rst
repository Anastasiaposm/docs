********
Сниппеты
********

.. note::

    Данный функционал появился с версии 4.4.1.

Сниппет - выделенная часть шаблона, пригодная для повторного использования. Классические примеры сниппетов - это "шапка" и "подвал", которые подключаются во всех шаблонах почтовых уведомлений. Сниппеты не имеют своего контекста и переменных, контекст и переменные наследуются от шаблона, вызывающего сниппет.
Функциональность сниппетов доступна как для шаблонов почтовых уведомлений, так и для шаблонов документов.

Пример подключения сниппета в шаблон:
``{{ snippet("header") }}``

Пример подключения сниппета в шаблон c дополнительными переменными: 
``{{ snippet("header", {"title": product.name  } ) }}``

==============
Типы сниппетов
==============

Все сниппеты в системе разделены на типы. Это разделение позволяет разграничить доступ к сниппетам из разных типов документов. Например, сниппеты типа "mail" доступны для всех почтовых уведомлений и недоступны для документов. Все доступные типы сниппетов описаны в схеме ``snippets/types`` (*app/schemas/snippets/types.php*). В схему автоматически попадают все типы документов, таким образом, при добавлении нового типа документа нет необходимости добавлять новый тип сниппета. На данный момент количество типов сниппетов равно количеству типов документов + тип для почтовых уведомлений ("mail").

================
Структура данных
================

Для хранения основной информации о сниппетах используется таблица ``cscart_template_snippets``, содержащая следующие столбцы:

.. list-table::
    :header-rows: 1
    :widths: 10 7 20
    
    *   - Название
        - Тип
	- Описание
    *   - snippet_id
        - id
	- Автоинкрементный идентификатор
    *   - code   
        - varchar(128)
	- Символьный код
    *   - type
        - varchar(32)
	- Тип
    *   - template
        - text
	- Шаблон
    *   - default_template
        - text
	- Шаблон по умолчанию
    *   - status
        - char(1)
	- Статус
    *   - params
        - text
	- Дополнительные параметры
    *   - updated  
        - int  
	- UNIX timestamp обновления
    *   - created 
        - int 
	- UNIX timestamp создания

Название сниппета является языкозависимым и хранится в отдельной таблице ``cscart_template_snippet_descriptions``.

=====================
Программный интерфейс
=====================

Для управления и взаимодействия со сниппетами реализованы следующие классы:

* ``\Tygh\Template\Snippet\Snippet`` — модель сниппета. Является программным представлением структуры сниппета.

* ``\Tygh\Template\Snippet\Repository`` — репозиторий сниппетов. Класс реализует низкоуровневые методы получения/добавления/обновления/удаления сниппетов в БД. Экземпляр класса доступен из контейнера ``Tygh::$app[‘template.snippet.repository’]``.

* ``\Tygh\Template\Snippet\Service`` — сервис. Класс реализует более высокоуровневые методы управления сниппетами. Экземпляр класса доступен из контейнера ``Tygh::$app[‘template.snippet.service’]``.

* ``\Tygh\Template\Snippet\Renderer`` — класс, отвечающий за формирование отображения сниппетов. Экземпляр класса доступен из контейнера ``Tygh::$app[‘template.snippet.renderer’]``.

=======================================
Схема формирования отображения сниппета
=======================================

.. image:: img/invoice_editor_3.png
    :align: center
    :alt: New banner

1. Определение типа сниппета из контекста. Каждый контекст, в котором вызывается сниппет, знает какие сниппеты для него доступны. Конктекст на программном уровне представляет собой класс, реализующий интерфейс "IContext".

2. Получение шаблона сниппета по типу и символьному идентификатору. Для этого используется класс ``\Tygh\Template\Snippet\Repository``.

3. Вызов пре хука ``'template_snippet_render_pre'``.

4. Вызов шаблонизатора для формирования отображения сниппета.

5. Вызов  пост хука ``'template_snippet_render_post'``.

6. Возврат результата.

====================
Добавление сниппетов
====================

Аддоны могут добавлять свои сниппеты любого типа. Предполагается, что добавление сниппетов будет происходить в момент установки аддона, а удаление сниппетов в момент удаления аддона. Для добавления необходимо использовать класс-сервис ``\Tygh\Template\Snippet\Service``.

Пример:

::

  /** @var \Tygh\Template\Snippet\Service $snippet_service */
  $snippet_service = Tygh::$app['template.snippet.service'];
  $snippet_service->createSnippet(array(
      ‘code’ => ‘barcode_image’,
      ‘type’ => ‘invoice’,
      ‘status’ => ‘A’,
      ‘template’ => ‘<img src="...">’
  ));

Для удаления сниппета используется метод ``removeSnippetByTypeAndCode``.

Пример:

::

  /** @var \Tygh\Template\Snippet\Service $snippet_service */
  $snippet_service = Tygh::$app['template.snippet.service'];
  $snippet_service->removeSnippetByTypeAndCode(‘invoice’, ‘barcode_image’);

Аддоны должны самостоятельно следить за статусами своих сниппетов, т.е. если аддон был отключен, то такой аддон должен отключить свои сниппеты, чтобы последние не влияли на формирование документов. Для обновления статуса сниппета следует использовать метод  ``updateSnippetStatus`` или ``updateSnippetStatusByTypeAndCode``:

::

  /** @var \Tygh\Template\Snippet\Service $snippet_service */
  $snippet_service = Tygh::$app['template.snippet.service'];
  $snippet_service->updateSnippetStatusByTypeAndCode('invoice', 'returned_products_table', Snippet::STATUS_DISABLE);

====================
Расширение сниппетов
====================

Бывают ситуации когда для формирования шаблона недостаточно визуального редактора, или он не эффективен, или же необходимы дополнительные структурированные данные. Например, для вывода списка товаров в "invoice" документе, необходимо выводить таблицу, которую можно легко расширять, очевидно, что делать это в визуальном редакторе документов не очень удобно. Для решения таких проблем были добавлены соответствующие хуки, которые позволяют влиять на формирование отображения сниппетов и добавлять дополнительные интерфейсы на страницах редактирования сниппетов и документов.

PHP хуки:
* ``'template_snippet_render_pre' - fn_set_hook('template_snippet_render_pre', $snippet, $context, $variable_collection)`` — выполняется перед формированием отображения сниппета. Этим хуком можно добавить необходимые переменные, которые впоследствии можно будет использовать в шаблоне сниппета.

* ``‘template_snippet_render_post’ - fn_set_hook('template_snippet_render_post', $snippet, $context, $variable_collection, $result)`` -  — выполняется после формирование отображения сниппета.

* ``‘template_snippet_remove_post’ - fn_set_hook('template_snippet_remove_post', $this, $snippet)`` — выполняется после удаления сниппета.

* ``‘template_snippet_save_post’ - fn_set_hook('template_snippet_save_post', $this, $snippet, $lang_code)`` — выполняется после сохранения сниппета в БД.

Template хуки:

* ``{hook name="snippets:tabs_extra"}{/hook}`` (*design/backend/templates/views/snippets/update.tpl*) — позволяет добавлять новые табы в popup редактирования сниппета.

============
Шаблонизатор
============

В качестве шаблонизатора используется библиотека "Twig" (версия 1.24). Подключены стандартные расширения:

* **Twig_Extensions_Extension_Text**
* **Twig_Extensions_Extension_Array**
* **Twig_Extension_Debug** — только в режиме разработки.

Добавлены дополнительные фильтры и функции:

* Фильтр **date** — предназначен для форматирования значения в виде даты.
* Фильтр **price** — предназначен для форматирования значения в виде денежного типа.
* Фильтр **filesize** — предназначен для форматирования значения в виде размера файла в килобайтах.
* Фильтр **puny_decode** — предназначен для декодирования URL-адресов из PunyCode в интернациональное представление.
* Функция **__** — предназначена для вывода переводов.
* Функция **snippet** — предназначена для подключения сниппетов.

Более подробную информацию о шаблонизаторе вы можете узнать из официальной документации: http://twig.sensiolabs.org/

