*********
Документы
*********

.. note::

    Данный функционал появился с версии 4.4.1.

Документ представляет из себя набор данных, формирующих информацию для закрепления каких-либо фактов, например, *счет за заказ*, *упаковочный лист*, *подарочный сертификат* и т. п. Шаблоны таких документов можно редактировать в **панели администратора** с помощью **визуального редактора**. Сам шаблон документа представляет собой **html-разметку** со вставками динамических данных, таких как переменные и сниппеты. Для формирования отображения документов используется **шаблонизатор Twig**, таким образом, в редакторе документов можно использовать все возможности, предоставляемые этой библиотекой. 

===============
Типы документов
===============

Для логического разделения все документы поделены на типы. Все доступные типы документов описаны в схеме ``documents/types`` (*app/schemas/documents/types.php*). Каждый тип — это отдельный класс, реализующий интерфейс ``\Tygh\Template\Document\IType``. 
Для ускорения добавления новых типов существует базовый абстрактный класс ``\Tygh\Template\Document\AType``, который реализует одинаковую для большинства типов логику.

Пример схемы, описывающей тип документа **invoice**:

::

  return array(
      'invoice' => array(
          'class' => '\Tygh\Template\Document\Invoice\Type',
          'arguments' => array('@template.snippet.repository', '@databse', '@template.document.invoice.renderer', '@template.variable_meta_data_collection_factory')
      )
  );

* **'invoice'** — символьный идентификатор типа документа.

* **'сlass'** — полное название класса, отвечающего за тип документа.

* **'arguments'** — описание аргументов конструктора класса. Каждый тип может иметь собственные зависимости. В качестве значений можно использовать плейсхолдеры, начинающиеся с символа "@" — это будет означать, что значение для агрумента будет получено из контейнера ``Tygh::$app``.

Подразумевается, что в рамках одного типа структура контекста документа всегда будет одинаковой.

На данный момент реализованы следующие типы документов:

* **Invoice**
* **Packing slip**
* **RMA::Packing slip** 
* **Gift certificates::Gift certificate**
* **Suppliers::Invoice**

========
Контекст
========

**Контекст** — это состояние системы и данные окружения на момент формирования документа. Например, контекстом для документа типа "invoice" будет являться заказ. Для каждого типа документов структура контекста должна быть известна, за счет этого можно добавлять собственные переменные, которые будут отталкиваться от контекста. 
 
На программном уровне конекст — это класс, реализующий интерфейс ``\Tygh\Template\IContext``, его минимальная обязанность — сообщить язык вывода и тип доступных сниппетов.

==========
Переменные
==========

Переменные — это динамическая составляющая шаблонов. Именно через переменные шаблон получает доступ к контексту и другим данным. Каждый тип документов имеет свои переменные. Все доступные переменные для типа должны быть описаны в схеме ``documents/[type]`` (*app/schemas/documents/[type].php*), где ``[type]`` — это тип документа, например, для типа "invoice" схема будет ``documents/invoice``. Каждая переменная — это отдельный класс, реализиующий интерфейс ``\Tygh\Template\IVariable``.

Пример описания переменной в схеме:

::

  return array(
      'order' => array(
          'class' => '\Tygh\Template\Document\Invoice\Variables\OrderVariable',
   	  'arguments' => array('#context', '#config', '@formatter'),
   	  'alias' => 'o',
          'attributes' => array(
       	      'order_id', 'company_id', 'total', 'subtotal', ...
          )
      )
  );

* **'order'** — основное имя переменной, используя его, можно будет обратиться к переменной в шаблоне, например: ``{{ order.total }}``.

* **'class'** — полное название класса, отвечающего за формирование переменной.

* **'arguments'** — массив, описывающий аргументы конструктора класса переменной. 

Каждая переменная может иметь собственные зависимости, все зависимости должны быть описаны в схеме. В качестве значений можно использовать плейсхолдеры:

* Начинающиеся с символа "#" — значение для такого аргумента формируется локально, в момент инициализации переменной, на данный момент доступно только 2 варианта: ``'#context'`` — экземпляр контекста документа и ``'#config'`` — схема переменной.

* Начинающиеся с символа "@" — значение для такого аргумента будет получено из контейнера ``Tygh::$app``.

Описание этого параметра можно опустить, по умолчанию считается, что конструктор описываемой переменной, принимает 2 аргумента — ``#context`` и ``#config``, т.е. Это равносильно описанию агрументов как 'arguments' => array('#context', '#config').

* **'alias'** — псевдоним переменной, используя его, также можно будет обратиться к переменной в шаблоне, например: ``{{ o.total }}``.

* **'attributes'** — этот параметр отвечает за описание атрибутов переменной, именно эти атрибуты будут отображены и доступны в редакторе документов. В качестве значения этого параметра может выступать как массив, так и анонимная функция для дополнительных вычислений, которая в конечном итоге возвращает массив. Параметром также можно описать древовидную структуру атрибутов, для этого нужно реализовать вложенный массив, например:

::

  'products' => array(
      '0..N' => array(
          'item_id', 'product_id', 'product_code', 'price', 'amount', 'product', 'product_status'
      )
  ).

Если этот параметр опущен, то для получения атрибутов будет использована рефлексия, в качестве доступных атрибутов будут рассматриваться все публичные нестатичные свойства класса, а так же публичные нестатичные методы класса, начинающиеся с ``get``.

Кроме основных параметров, в схеме можно описать любые другие, которые будут доступны через ``'#config'``.

Также реализована отложенная инициализация переменных, которая единожды создает экземпляр переменной при первом обращении к ней. Таким образом, разработчику не нужно заботиться об этом самостоятельно. За реализацию этого поведения отвечает прокси класс ``\Tygh\Template\VariableProxy``.

================
Структура данных
================

Шаблоны документов сохраняются в таблице ``cscart_template_documents``, которая имеет следующую структуру:


.. list-table::
    :header-rows: 1
    :widths: 10 7 20
    
    *   - Название
        - Тип
	- Описание
    *   - document_id  
        - int 
	- Автоинкрементный идентификатор
    *   - template   
        - text
	- Шаблон
    *   - default_template
        - text 
	- Шаблон по умолчанию
    *   - type
        - varchar(32)
	- Тип документа
    *   - code
        - varchar(128)
	- Символьный идентификатор документа
    *   - updated  
        - int  
	- UNIX timestamp обновления
    *   - created 
        - int 
	- UNIX timestamp создания

=====================
Программный интерфейс
=====================

Для управления и взаимодействия с шаблонами документов реализованы следующие классы:

* ``\Tygh\Template\Document\Document`` — модель шаблона документа. Является программным представлением структуры шаблона в БД.

* ``\Tygh\Template\Document\Repository`` класс-репозиторий. Реализует низкоуровневые методы добавления/обновления/удаления/выборки шаблонов из БД. Экземпляр класса доступен из контейнера ``Tygh::$app[‘template.document.repository’]``.

* ``\Tygh\Template\Document\Service`` — класс-сервис. Реализует более высокоуровневые методы управления шаблонов. Экземпляр класса доступен из контейнера ``Tygh::$app[‘template.document.service’]``.

Вспомогательные классы:

* ``\Tygh\Template\Document\TypeFactory`` — класс-фабрика для создания экземпляров типа документов. Экземпляр класса доступен из контейнера ``Tygh::$app['template.document.type_factory']``.

* ``\Tygh\Template\Collection`` — класс нетипизированная коллекция данных. Используется для создания коллекции переменных.

* ``\Tygh\Template\ObjectFactory`` — класс фабрика объектов. Умеет на основе описывающей информации создавать экземпляры классов. Экземпляр класса доступен из контейнера ``Tygh::$app['template.object_factory']``.

* ``\Tygh\Template\Renderer`` — класс-обертка над "Twig". Экземпляр класса доступен из контейнера``Tygh::$app['template.renderer']``.

* ``\Tygh\Template\VariableMetaData`` — класс для обработки мета данных переменных. 

* ``\Tygh\Template\VariableCollectionFactory`` — фабрика коллекций переменных. Умеет создавать коллекцию переменных на основе схемы переменных. Экземпляр класса доступен из контейнера ``Tygh::$app['template.variable_collection_factory']``.

* ``\Tygh\Template\VariableMetaDataCollectionFactory`` — фабрика коллекций мета данных переменных. Умеет создавать коллекцию на основе схемы переменных. Экземпляр класса доступен из контейнера ``Tygh::$app['template.variable_meta_data_collection_factory']``.

* ``\Tygh\Template\VariableProxy`` — прокси класс. Организует отложенную инициализацию переменных.

========================================
Схема формирования отображения документа
========================================

.. image:: img/invoice_editor_2.png
    :align: center
    :alt: New banner

1. Получение шаблона документа. Выборка модели шаблона документа с помощью класса-репозитория ``\Tygh\Template\Document\Repository``.

2. Формирование контекста документа. На основе переданных данных создаем контекст документа.

3. Формирование коллекции переменных. Инициализация коллекции переменных на основе контекста документа с помощью класса ``\Tygh\Template\VariableCollectionFactory``.

4. Вызов шаблонизатора для формирования отображения документа.

5. Возврат результата.

===================================================
Добавление переменных в список доступных переменных
=================================================== 

Для того, чтобы добавить свою переменную необходимо создать класс переменной, реализующей интерфейс ``\Tygh\Template\IVariable``, и зарегистрировать его в схеме документа.

Пример добавления переменной, выводящей "barcode" для заказа:

Файл **app/addons/barcode/Barcode/Invoice/BarcodeVariable.php**.

::

  <?php

  namespace Barcode\Invoice;

  use Tygh\Registry;
  use Tygh\Template\Invoice\Order\Context;
  use Tygh\Template\IVariable;

  class BarcodeVariable implements IVariable
  {
      public $image;

      public function __construct(Context $context)
      {
          $order = $context->getOrder();

          $width = Registry::get('addons.barcode.width');
          $height = Registry::get('addons.barcode.height');
          $url = fn_url(sprintf(
              'image.barcode?id=%s&type=%s&width=%s&height=%s&xres=%s&font=%s&no_session=Y',
       	      $order->getId(),
              Registry::get('addons.barcode.type'),
       	      $width,
       	      $height,
       	      Registry::get('addons.barcode.resolution'),
       	      Registry::get('addons.barcode.text_font')
          ));

          $this->image = <<<EOF
  <div style="text-align:center">
      <img src="{$url}" alt="BarCode" width="{$width}" height="{$height}">
  </div>
  EOF;
      }
  }

Расширяем схему переменных для документов типа "invoice":

Добавляем файл **/app/addons/barcode/schemas/documents/invoice.post.php**.

::

  <?php
  $schema['barcode'] = array(
      'class' => '\Barcode\Invoice\BarcodeVariable'
  );

  return $schema;

После этих манипуляций в редакторе документов типа "invoice" появится еще одна доступная переменная с именем "barcode" и атрибутом "image".

================================================
Добавление сниппетов в список досупных сниппетов
================================================

Для того, чтобы сниппет появился в списах доступных сниппетов, необходимо для выбранного типа документа добавить сниппет в БД. Информация о добавлении сниппетов доступна в :doc: `Сниппеты <snippets>`.

=====================
Расширение документов
=====================

PHP хуки:

* ``template_document_get_name - fn_set_hook('template_document_get_name', $this, $result)`` — вызывается после формирования имени документа. С помощью хука можно повлиять на название документа. 

* ``template_document_remove_post - fn_set_hook('template_document_remove_post', $this, $document)``— вызывается после удаления документа.

Template хуки:

* ``{hook name="documents:tabs_extra"}{/hook} (design/backend/templates/views/documents/update.tpl)`` — позволяет добавлять дополнительные табы на страницу редактирования документа.

* ``{hook name="documents:update_buttons_extra"}{/hook} (design/backend/templates/views/documents/update.tpl)`` — позволяет добавлять дополнительные кнопки на панель инструментов.

* ``{hook name="documents:update_adv_buttons_extra"}{/hook} (design/backend/templates/views/documents/update.tpl)`` — позволяет добавлять дополнительные кнопки на панель инструментов в зависимости от текущего таба.

===========
Ограничения
===========

* **Хуки** 

Одно из самых заметных ограничений — отсутствие хуков в самом шаблоне документа. Т.е. подразумевается, что шаблон документа не может быть изменен автоматически (программно), это действие полностью возлагается на администратора магазина. **Таким образом, аддоны могут лишь расширять списки доступных сниппетов и переменных**.

* **Сложная логика шаблонов** 

Визуальный редактор шаблона не полностью поддерживает возможности использования ветвления, циклов и т.п. в шаблонах, поэтому если есть необходимость формировать шаблон с использованием логики, то необходимо использовать сниппеты, в которых отсуствует визуальный редактор.


