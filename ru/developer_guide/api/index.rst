********
REST API
********

=====
Обзор
=====

* cледует модели `RESTfull <http://en.wikipedia.org/wiki/Representational_state_transfer>`_;

* aвторизация `Basic HTTP <http://en.wikipedia.org/wiki/Basic_access_authentication>`_ (логин — email; пароль — API Key из профиля пользователя)

* вложенность объектов не более 2х (products/features, products/options, products/features/images)
    
* привелегии групп пользователей, а также привязка к ним определяется в самих объектах

====
REST
====

**REpresentational State Transfer (REST)** — передача представлений состояний. Стиль построения архитектуры распределенного приложения. Был описан и популяризован в 2000 году Роем Филдингом (Roy Fielding), одним из создателей протокола HTTP.

Суть реализации RESTfull API — это представление логики работы магазина в виде набора объектов(сущностей) с изменяемым состоянием. Средство реализации — протокол HTTP 1.1, его методы, статусы, заголовки.

Для изменения состояния объекта используется 4 метода:

* **GET** — Получение информации об объекте

* **POST** — Создание нового объекта

* **PUT** — Обновление информации об объекте

* **DELETE** — Удаление объекта

Исходя из того, что REST архитектура подразумевает работу с логикой в виде работы с состоянием объектов, объекты API не всегда будут соответствовать объектам модели, используемым в магазине. 

Яркий пример - реализация добавления в продуктов в корзину. Для этого в концепции REST следует создать новый объект /cart и PUT запрос на этот объект с указанием в параметрах id продукта и будет как раз добавлением товара в корзину. При этом как таковой не существует объекта корзина в модели магазина.

============
Работа с API
============

В качесте адреса во всех примерах используется example.com. Следует заменять на адрес вашего магазина.

-----------
Авторизация
-----------

Для авторизации используется механизм `Basic HTTP <http://en.wikipedia.org/wiki/Basic_access_authentication>`_.

В качестве имени пользователя выступает адрес электронной почты, в качестве пароля — API-ключ, который задаётся в профиле пользоваеля в Панели администратора магазина.

.. note::

    В случе передачи email в строке URL следует знак ``@``, заменить на ``%40``.

--------------------------------
Варианты работы (примеры с cURL)
--------------------------------

Передача в строке URL::

  curl --basic -X GET 'http://admin%40example.com:va1t900b3P2UCQWDHZk1MKB83963z16i@example.com/api/users/'

Использование параметра ``--user``::

  curl --user admin@example.com:va1t900b3P2UCQWDHZk1MKB83963z16i  -X GET 'http://example.com/api/users/'

Через заголовок ``--header``::

  curl --header 'Authorization: Basic YWRtaW5AZXhhbXBsZS5jb206dmExdDkwMGIzUDJVQ1FXREhaazFNS0I4Mzk2M3oxNmk=' -X GET 'http://example.com/api/users/'

При в заголовке пара логина/пароля должна быть зашифрована по **base64**. Вот эти строки илюстрируют, как это происходит::

  $token = base64_encode("yourApiUserName:yourAPIToken");
  $authHeaderString = 'Authorization: Basic ' . $token;

----------------------
Формат выходных данных
----------------------

Нужно установить заголовок Accept. По умолчанию даные возвращаются в JSON::

  curl --header "Accept: application/json"

---------------------
Формат входных данных
---------------------

Нужно установить заголовок Content-type. По умолчанию ожидаются в text/plain::

  curl --header "Content-type: application/json"


=========================
Список сущностей REST API
=========================

.. toctree::
    :maxdepth: 2

    entities/index
