******************
Выгрузка каталога
******************

.. contents:: Содержание
    :local: 
    :depth: 2

Процесс выгрузки
================

**1. Начало сеанса**
	
	 Этап предназначен для авторизации системы учета на сайте. В ответе на запрос с базовой авторизацией, сайт отправляет данные о запущенной сессии. 

**2. Запрос параметров**

	 На этом этапе системе учета запрашивает информацию о возможностях сайта:
	
			* Поддержка zip файлов. Статус поддержки zip файлов зависит от наличия расширения Zip в PHP. Расширение является обязательным для работы CS-Cart, поэтому статус поддержки zip будет всегда положительным, однако вы можете явно отключить поддержку zip файлов для CommerceML через файл конфигурации, указав:
			
			  ``$config[‘commerceml’][‘allow_zip’] = false;``
	
			* Максимальный размер файла. Размер высчитывается на основе таких настроек PHP как: `upload_max_filesize` и `post_max_size`. Однако вы можете явно указать меньший размер файла для CommerceML через файл конфигурации, указав:
			
			  ``$config[‘commerceml’][‘file_limit’] = ‘12M’;``

	 Также на этом этапе проходит ротация файлов с предыдущих сеансов обмена данными и подготовка директории для текущего сеанса: ``var/files/<company_id>/exim/1C``, где ``<company_id>`` - идентификатор витрины или вендора в зависимости от редакции CS-Cart.	  

**3. Выгрузка файлов обмена**

	 На этом этапе система учета выгружает файлы обмена. Файлы сохраняются в директорию ``var/files/<company_id>/exim/1C``. Файлы контента сохраняются в директорию ``var/files/<company_id>/exim/1C/import_files``. Контентными файлами считаются все файлы, расширения которых отличаются от zip и xml, как правило это изображения товаров.

**4. Загрузка данных**

	 Этап разбит на несколько шагов:

		 1. Распаковка zip архива
	
		 2. Парсинг XML и конвертация
	
			 На этом этапе все необходимые для импорта сущности конвертируются  в DTO и сохраняются в БД, для дальнейшего использования. За процесс конвертации отвечают так называемые конверторы, все конверторы модуля CommerceML расположены в пространстве имен ``Tygh\Addons\CommerceML\Convertors``.
		     В модуле CommerceML выделены следующие типы сущностей:	 
	   
					* ProductDto - Для данных о товаре. 
					* CategoryDto - Для данных о категории.
					* CurrencyDto - Для данных о валюте.
					* PriceTypeDto - Для данных о типе цен.
					* ProductFeatureDto - Для данных о характеристики товара.
					* ProductFeatureVariantDto - Для данных о варианте характеристики товара.
					* TaxDto - Для данных о типе налог.
		
			 Кроме этого модуль реализует множество других DTO, например ``PropertyDto``, который может использоваться для сохранения значения пользовательского свойства товара. Полный список всех DTO вы можете посмотреть в пространстве имен ``Tygh\Addons\CommerceML\Dto``.
	
		 3. Импорт товаров
	
		    Импорт выполняется итерационно с ограничением по времени на одну итерацию - 60 секунд. На этом шаге из БД выбираются товары и все необходимые для импорта товара DTO. За процесс импорта отвечают так называемые импортеры, все импортеры модуля CommerceML расположены в пространстве имен ``Tygh\Addons\CommerceML\Importers``. На процесс импорта влияют большое кол-во настроек синхронизации, процесс импорта может значительно отличаться в зависимости от настроек. Все импортеры стремятся использовать стандартные функции ядра, так например для создания товара будет вызван ``fn_update_product``, это значительно повышает согласованность данных и снимает нагрузку с разработчиков, теперь не нужно дублировать логику с ``fn_update_product`` на ``CommerceML``, однако это влияет на скорость работы импорта в целом.
		    По завершению всего импорта из БД удаляются все DTO.
			
			   .. important:: Важно! Первый импорт как правило происходит в режиме анализа данных, т.е. ничего не импортируется. Это связано с тем, что для полноценного импорта необходимо сопоставить некоторые сущности системы учета с сущностями на сайте, это как минимум: 
				     
						* Типы цен
						* Типы налогов
						* Валюты
				
Точки расширения
================

**1. Схема cml/aliases**

	 Схема используется для замещения терминов формата CommerceML на термины английского языка в коде. Если схема не покрывает какие то термины, вы можете расширить эту схему. Схема используется классом ``\Tygh\Addons\CommerceML\Xml\SimpleXmlElement``, в котором реализованы различные методы для работы с XML.

	 .. important::
	 
	    Важно! Не меняйте существующие термины, это может полностью сломать логику работы модуля.
**2. Схема cml/callbacks_catalog**

	 Схема описывает функции-обработчики для отдельных нод-элементов XML документа.
     Структура схемы представляется из себя ассоциативный массив, ключами которого является пути к XML элементу, а значениями анонимные функции - обработчики в аргументы которых приходят:
		
			* $xml - объект типа ``\Tygh\Addons\CommerceML\Xml\SimpleXmlElement``
		
			* $import_storage - объект типа ``Tygh\Addons\CommerceML\Storages\ImportStorage``, который реализует методы для работы с хранилищем текущего импорта.
		
	 Путь к XML элементу - это некоторое подобие xpath, но сильно ограниченное в  возможностях, это связано с тем, что парсинг XML происходит построчно через `XMLReader <https://www.php.net/manual/en/book.xmlreader.php>`_
     Задача обработчиков - преобразовать/конвертировать ``$xml`` в полезные DTO и сохранить их в хранилище импорта.
**3. Схема cml/mappable**

	 Схема описывает типы сущностей, которые могут быть вручную сопоставлены с типами сущностей в системе учета.
	 Интерфейс сопоставление сущностей будет доступен на странице настройки синхронизации.  
**4. Схема cml/commands (Экспериментальная логика, со временем может изменится)**

	 Обработка запросов от системы учета реализована в виде Command Bus. Схема описывает связь команды с непосредственным обработчиком команды, также дает возможность описать middleware, которые могут влиять на обработку команды. 
	 Потенциально через схему можно повлиять на выполнение таких команд как:
	 
			* AuthCommand - Команда для выполнения авторизации системы учета.
			* UploadImportFileCommand - Команда для загрузки файлов от системы учета.
			* CreateImportCommand - Команда для создания импорта и выполнения конвертации.
			* UnzipImportFileCommand - Команда для распаковки архивов.
			* ExecuteCatalogImportCommand - Команда для выполнения импорта товаров.
			* RemoveImportCommand - Команда для удаления импорта. Например если он был выполнен только в режиме анализа.
			* CleanUpFilesDirCommand - Команда для ротации и очистки директории для файлов учетной системы.
			
**5. Cхема cml/settings**

	 Схема предназначена для описания настроек обмена данными с системой учета.
	 Для добавления своей настройки потребуется не только расширение схемы, а также вывод настройки в интерфейс, для этого есть следующие tpl хуки:
	 
			* commerceml:catalog_settings_main
			* commerceml:catalog_settings_automatic_matching
			* commerceml:catalog_settings_additional
**6. Хук commerceml_product_convertor_convert**

	 Выполняется после конвертации XML элемента в ``ProductDto``. Позволяет расширить ``ProductDto`` пользовательскими данными.
**7. Хук commerceml_category_convertor_convert**

	 Выполняется после конвертации XML элемента в ``CategoryDto``. Позволяет расширить ``CategoryDto`` пользовательскими данными.
**8. Хук commerceml_price_type_convertor_convert**

	 Выполняется после конвертации XML элемента в ``PriceTypeDto``. Позволяет расширить ``PriceTypeDto`` пользовательскими данными.
**9. Хук commerceml_product_feature_convertor_convert**

	 Выполняется после конвертации XML элемента в ``ProductFeatureDto``. Позволяет расширить ``ProductFeatureDto`` пользовательскими данными.
**10. Хук commerceml_product_importer_import_pre**

	  Выполняет перед тем как ``ProductDto`` будет трансформирован в ``$product_data` и будет вызван ``fn_update_product``. Обратите внимание в ``fn_update_product`` есть свои хуки, если вам необходимо изменить сформированный из ``ProductDto`` ``$product_data``, то вы можете сделать это в хуке ``update_product_pre``. 


