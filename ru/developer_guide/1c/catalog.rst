******************
Выгрузка каталога 
******************

.. contents:: Содержание
    :local: 
    :depth: 2

Процесс выгрузки
================

1. Начало сеанса
----------------

Этап предназначен для авторизации системы учета на сайте. В ответе на запрос с базовой авторизацией сайт отправляет данные о запущенной сессии.

2. Запрос параметров
--------------------

На этом этапе система учета запрашивает информацию о возможностях сайта:
 
* Поддержка ZIP-файлов. Статус поддержки ZIP-файлов зависит от наличия расширения ZIP в PHP. Расширение является обязательным для работы CS-Cart, поэтому статус поддержки ZIP будет всегда положительным. Однако вы можете явно отключить поддержку ZIP-файлов для CommerceML через файл конфигурации, указав: 
 
  ::
 
  $config[‘commerceml’][‘allow_zip’] = false;

* Максимальный размер файла. Размер высчитывается на основе таких настроек PHP как: `upload_max_filesize` и `post_max_size`. Однако вы можете явно указать меньший размер файла для CommerceML через файл конфигурации, указав: 
 
  ::
 
  $config[‘commerceml’][‘file_limit’] = ‘12M’;

Также на этом этапе проходит ротация файлов с предыдущих сеансов обмена данными и подготовка директории для текущего сеанса: `var/files/<company_id>/exim/1C`, где `<company_id>` — идентификатор витрины или продавца в зависимости от редакции CS-Cart.	  

3. Выгрузка файлов обмена
-------------------------

На этом этапе система учета выгружает файлы обмена. Файлы сохраняются в директорию `var/files/<company_id>/exim/1C`. Файлы контента сохраняются в директорию `var/files/<company_id>/exim/1C/import_files`. Контентными файлами считаются все файлы, расширения которых отличаются от ZIP и XML, как правило, это изображения товаров.

4. Загрузка данных
------------------

Этап разбит на несколько шагов:

#. Распаковка ZIP-архива
 
#. Парсинг XML и конвертация
 
   На этом этапе все необходимые для импорта сущности конвертируются в DTO и сохраняются в БД для дальнейшего использования. За процесс конвертации отвечают так называемые конверторы. Все конверторы модуля CommerceML расположены в пространстве имен ``Tygh\Addons\CommerceML\Convertors``. 
	
   В модуле CommerceML выделены следующие типы сущностей:
 
   * ProductDto — для данных о товаре;
   * CategoryDto — для данных о категории;
   * CurrencyDto — для данных о валюте;
   * PriceTypeDto — для данных о типе цен; 
   * ProductFeatureDto — для данных о характеристики товара; 
   * ProductFeatureVariantDto — для данных о варианте характеристики товара;
   * TaxDto — для данных о типе налог.
 
   Кроме этого, модуль реализует множество других DTO. Например `PropertyDto`, который может использоваться для сохранения значения пользовательского свойства товара. Полный список всех DTO вы можете посмотреть в пространстве имен ``Tygh\Addons\CommerceML\Dto``.
	
#. Импорт товаров
 
   Импорт выполняется итерационно с ограничением по времени на одну итерацию — 60 секунд. На этом шаге из БД выбираются товары и все необходимые для импорта товара DTO. За процесс импорта отвечают так называемые импортеры. Все импортеры модуля CommerceML расположены в пространстве имен ``Tygh\Addons\CommerceML\Importers``. 
	
   На процесс импорта влияет большое количество настроек синхронизации. В зависимости от настроек процесс импорта может значительно отличаться. 
	
   Все импортеры стремятся использовать стандартные функции ядра. Так, например, для создания товара будет вызван `fn_update_product`, что значительно повышает согласованность данных и снимает нагрузку с разработчиков. Теперь не нужно дублировать логику с `fn_update_product` на `CommerceML`. Однако это влияет на скорость работы импорта в целом. По завершении всего импорта из БД удаляются все DTO.
 
   .. important:: Первый импорт, как правило, происходит в режиме анализа данных, т.е. ничего не импортируется. Это связано с тем, что для полноценного импорта необходимо сопоставить некоторые сущности системы учета с сущностями на сайте. Это как минимум:	
	
    * Типы цен;
    * Типы налогов;
    * Валюты.
  
Точки расширения
================

1. Cхемы
---------

* **Cml/aliases**

    Схема используется для замещения терминов формата CommerceML на термины английского языка в коде. Если схема не покрывает какие-либо термины, вы можете расширить эту схему. Схема используется классом ``\Tygh\Addons\CommerceML\Xml\SimpleXmlElement``, в котором реализованы различные методы для работы с XML.

    .. important:: Не меняйте существующие термины, это может полностью сломать логику работы модуля.

* **Cml/callbacks_catalog**

    Схема описывает функции-обработчики для отдельных нод-элементов XML-документа.

    Структура схемы представляет из себя ассоциативный массив, ключами которого является пути к XML-элементу, а значениями — анонимные функции-обработчики, в аргументы которых приходят:

    * $xml — объект типа ``\Tygh\Addons\CommerceML\Xml\SimpleXmlElement``;
    * $import_storage — объект типа ``Tygh\Addons\CommerceML\Storages\ImportStorage``, который реализует методы для работы с хранилищем текущего импорта.
 
    Путь к XML-элементу — это некоторое подобие xpath, но сильно ограниченное в  возможностях. Это связано с тем, что парсинг XML происходит построчно через `XMLReader <https://www.php.net/manual/en/book.xmlreader.php>`_.
 
    Задача обработчиков — преобразовать/конвертировать `$xml` в полезные DTO и сохранить их в хранилище импорта.
 
* **Cml/mappable**

    Схема описывает типы сущностей, которые могут быть вручную сопоставлены с типами сущностей в системе учета.

    Интерфейс сопоставления сущностей будет доступен на странице настройки синхронизации.  

* **Cml/commands**

    .. note:: Эспериментальная логика, со временем может измениться.

    Обработка запросов от системы учета реализована в виде Command Bus. Схема описывает связь команды с непосредственным обработчиком команды и дает возможность описать middleware, которые могут влиять на обработку команды. 

    Потенциально через схему можно повлиять на выполнение таких команд как:

    * AuthCommand — команда для выполнения авторизации системы учета;
    * UploadImportFileCommand — команда для загрузки файлов от системы учета;
    * CreateImportCommand — команда для создания импорта и выполнения конвертации;
    * UnzipImportFileCommand — команда для распаковки архивов;
    * ExecuteCatalogImportCommand — команда для выполнения импорта товаров;
    * RemoveImportCommand — команда для удаления импорта, например, если он был выполнен только в режиме анализа;
    * CleanUpFilesDirCommand — команда для ротации и очистки директории для файлов учетной системы.
 
* **Cml/settings**

    Схема предназначена для описания настроек обмена данными с системой учета.

    Для добавления своей настройки потребуется расширение схемы, а также вывод настройки в интерфейс. Для этого есть следующие TPL-хуки:

    * commerceml:catalog_settings_main;
    * commerceml:catalog_settings_automatic_matching;
    * commerceml:catalog_settings_additional.
 
2. Хуки
--------

* **Commerceml_product_convertor_convert**

    Выполняется после конвертации XML-элемента в `ProductDto`. Позволяет расширить `ProductDto` пользовательскими данными.

* **Commerceml_category_convertor_convert**

    Выполняется после конвертации XML-элемента в `CategoryDto`. Позволяет расширить `CategoryDto` пользовательскими данными.

* **Commerceml_price_type_convertor_convert**

    Выполняется после конвертации XML-элемента в `PriceTypeDto`. Позволяет расширить `PriceTypeDto` пользовательскими данными.

* **Commerceml_product_feature_convertor_convert**

    Выполняется после конвертации XML-элемента в `ProductFeatureDto`. Позволяет расширить `ProductFeatureDto` пользовательскими данными.

* **Commerceml_product_importer_import_pre**

    Выполняет перед тем, как `ProductDto` будет трансформирован в `$product_data` и будет вызван `fn_update_product`. Обратите внимание, что в `fn_update_product` есть свои хуки. Если вам необходимо изменить сформированный из `ProductDto` `$product_data`, то вы можете сделать это в хуке `update_product_pre`. 

Запуск обмена в ручном режиме
=============================
Для запуска выгрузки каталога товара в ручном режиме выполните следующие шаги:

#. Создайте директорию `var/files/<company_id>/exim/1C`, где `<company_id>` — идентификатор витрины или продавца в зависимости от редакции CS-Cart.

#. Загрузите в директорию `var/files/<company_id>/exim/1C` файлы import.xml и offers.xml, полученные из системы учета.

#. Для обработки файла import.xml перейдите в браузере по адресу http://example.com/index.php?dispatch=commerceml.import&type=catalog&mode=import&filename=import.xml&is_manual=1. На запрос базовой авторизации укажите email и пароль администратора витрины либо продавца в зависимости от редакции CS-Cart.
   
   Результатом запроса могут быть следующие ответы:
   
   * progress — означает, что обработка еще не завершена. В этом случае повторите исходный запрос.
   * success — означает, что обработка успешна завершена, можно переходить к следующему шагу.
   * failure — означает, что обработка завершилась ошибкой. Ошибки обработки можно будет увидеть в логах.
 
#. Для обработки файла offers.xml перейдите в браузере по адресу http://example.com/index.php?dispatch=commerceml.import&type=catalog&mode=import&filename=offers.xml&is_manual=1.
   
   Результатом запроса могут быть следующие ответы:
   
   * progress — означает, что обработка еще не завершена. В этом случае повторите исходный запрос.
   * success — означает, что обработка успешна завершена.
   * failure — означает, что обработка завершилась ошибкой. Ошибки обработки можно будет увидеть в логах.

.. important:: Для полноценного выполнения импорта нужно сопоставить сущности системы учета с сущностями сайта в настройках синхронизации в административной панеле. В противном случае каждый запуск обмена будет выполняться только в режиме анализа.

.. important:: Отключите дебаггер если он запущен. В противном случае возможен выход за пределы выделенной памяти, т.к. дебаггер будет стремиться собрать максимум информации.

Логи и ротация
==============
Детальную информацию о ходе выполнения обмена можно увидеть в файле `var/files/<company_id>/exim/commerceml.log`, где `<company_id>` — идентификатор витрины или продавца в зависимости от редакции CS-Cart.

По умолчанию размер файла ограничен объемом в 10MB. В случае, если размер файла превышает указанный объем, файл подвергается ротации. Таким образом, в директории `var/files/<company_id>/exim/` могут образоваться файлы вида `var/files/<company_id>/exim/commerceml.log.<N>`, где <N> — порядковый номер (чем больше номер, тем старше файл). По умолчанию максимальное количество таких файлов равно 10. 
	
Вы можете изменить значения по умолчанию в файле конфигурации, указав: 

::

$config['commerceml']['max_log_file_size'] = 20480; //20MB
$config['commerceml']['max_log_files'] = 100;

Обратите внимание, параметр `max_log_file_size` задается в килобайтах.

Ротации также подвергается директория `var/files/<company_id>/exim/1С`. Таким образом, в директории `var/files/<company_id>/exim/` могут образоваться директории вида `var/files/<company_id>/exim/1С.<N>`, где <N> — порядковый номер (чем больше номер, тем старше директория). Ротация этой директории выполняется на этапе “Запрос параметров”. По умолчанию максимальное количество таких директорий равно 20. 

Вы можете изменить значение по умолчанию в файле конфигурации, указав: ::

$config['commerceml']['max_dirs_count’] = 5;