************************
Типы опций и исключений
************************

.. contents::
   :backlinks: none
   :local:

======================
Цель функциональности
======================

Возможность создавать последовательные и параллельные комбинации опций, а также создавать запрещеные или разрешеные комбинации исключений.

=========================================
Цикл функционирования с полным описанием
=========================================

----------------------
Панель администратора
----------------------

+++++++++++++++++++++++++++++++++++
Выбор типа опций и типа исключений
+++++++++++++++++++++++++++++++++++

На детальной странице редактирования товара появилась новая секция **"Options settings"** с двумя новыми настройками:

* **Options type** - Тип опций. 

Имеет 2 возможных варианта: 

  * *Simultaneous* - параллельные. Паралельные - это то, что было у нас до введения новой функциональности в работу. Т.е. все опции и их варианты появляются одновременно (все значения заполнены). По умолчанию выбран именно этот тип.

  * *Sequential* - последовательные. Последовательные - означает, что опции будут выбираться последовательно. К вариантам опций будет добавляться пустое значение *Please, select one* для того, чтобы пользователь выбрал один из доступных вариантов.

При последовательных опциях важным значением является позиция опции относительно друг друга. Для изменения позиции нужно использовать опцию *Position* на странице настройки опции.

В принципе, без исключений последовательные опции не имеют смысла.

* **Exceptions type** - Тип исключений. 

Имеет 2 возможных варианта: 

  * *Forbidden* - запрещающий тип исключений. При этом типе все создаваемые исключения считаются запрещающими. Т.е. пользователь не сможет выбрать созданную комбинацию. 

  * *Allowed* - разрешающий тип исключений. При этом типе наоборот, пользователь сможет выбрать только те комбинации, которые были созданы администратором.

По умолчанию всегда стоит *Forbidden*. Тем самым достигается совместимость со старыми версиями.

Для облегчения восприятия на странице опций кнопка добавления исключений меняет свое название в зависимости от типа выбранных исключений.

При создании исключений, возможны следующие варианты:

.. list-table::
    :header-rows: 1
    :widths: 10 15
    
    *   -   Значение 
        -   Вариант опции
    *   -   Any variant can be selected
        -   Все варианты опции
    *   -   No variants can be selected
        -   Эта опция будет недоступна, если остальные условия совпадут
 
**Пример:**

Допустим мы создаем кроссовки с двумя опциями: *размер: 41, 42, 43*; *цвет: черный/желтый, синий, хаки*. При этом, *43-й размер* не может быть из выбранных цветов, а имеет свою уникальную фирменную расцветку. К тому же у нас кончились все кроссовки с цветом *хаки*.

Таким образом, мы должны будем создать следующие исключения (запрещающие): 

*Размер: 43; Цвет: No variants can be selected*. Это означает, что если будет выбран *43-й размер*, то поле *"Цвет"* будет недоступно.

*Размер: Any variant can be selected; Цвет: Хаки*. Тем самым мы ставим запрещающее условие, что если выбран цвет *Хаки*, и не важно какой (любое значение) размер.

+++++++++++++++
Виды товаров
+++++++++++++++

Существуют 2 вида товаров: **зависящие** от опций и **не зависящие** от них.

**Пример:** 

Кроссовки физически зависят от опций (размер 43, 44 и тд). Т.е. разные опции - разные вещи. 

Или же подарок с ленточкой или без (т.е. в принципе подарок всегда один и тот же, только перевязать ленточкой или нет).

Соответственно, товары, которые зависят от опций должны иметь свое отдельное количество, свой код и, возможно, картинку. Для этого предусмотрена опция (детальная страница товара в панели администратора) *Inventory - Расчет количества товара в наличии*.

У этой опции может быть 3 различных значения:

* **Do not track** - Не отслеживать

По этой опции все достаточно понятно. Если товар не нуждается в подсчете количества на складе (например постоянные поставки или что-то еще), то просто выключаем понятие количество товара.

* **Track without options** - Отслеживать количество товара без учёта опций

Это вариант товара, который не зависит от опций. Количество товара задается в поле *In stock - В наличии*. При смене опций будет учитываться именно это количество. Если для товара созданы комбинации с уникальными кодами товара и картинками, то при изменении опций на созданную комбинацию код товара останется неизменными (родительским), но картинка изменится.

* **Track with options** - Отслеживать количество товара с учётом опций

В этом случае - количество товара будет зависеть от комбинаций опций. Поле *In stock* будет недоступно. Вместо него будет ссылка на страницу создания комбинаций опций. На витрине при совпадении комбинации код товара будет изменен на тот, который указан в комбинации (если же в комбинации код не указан, то останется родительский). Количество также будет зависеть от значения комбинации. Картинки, как и в предыдущем случае, будут изменены. Для того, чтобы создать комбинацию с опцией, необходимо, чтобы был включен чекбокс *Inventory - Расчет количества товара в наличии* на странице редактирования свойств опции. *Inventory* не связаны с понятием *Exceptions*. Исключения будут работать в любом случае, в не зависимости от выбранного значения опции *Inventory*.

++++++++++++++++
Поведение опций
++++++++++++++++

В настройках у каждой опции добавилось поле *Missing variants handling* с двумя возможными вариантами:

* **Display message** - при попадании опции в исключение вместо значений будет показано поле *NA*. Если поле было *Required* - товар невозможно будет добавить в корзину. 

* **Hide option completely** - при попадании опции в исключение, она будет полностью спрятана вместе с заголовком. Если поле было *Required* - товар можно свободно добавить в корзину.

++++++++++++++++++++++++++++++++++++++++++++++++++++
Предупреждение о низком количестве товара на складе
++++++++++++++++++++++++++++++++++++++++++++++++++++

После того, как пользователь сделает покупку, количество товара будет уменьшено на то количество, которое было им куплено.

В случае, когда количества товара оказывается недостаточно для заказа, статус заказа становится *Backordered - Отложен*, а количество товара на складе возвращается к исходному значению.

Если оставшееся количество товара оказывается меньше лимита, установленного опцией *Low stock notification threshold - Порог предупреждения о низком количестве товара на складе* (Панель администратора -> Настройки -> Общие), то администратору будет отправлено сообщение о том, что товар (будет указано его название и код товара) на складе кончается, также будет сообщено количество, которое осталось. 

Отсылаемое количество будет зависеть от опции *Inventory* и значения, которое там указано. Если будет выбрано *Отслеживать с опциями*, то будет послано количество комбинации, в противном случае - количество товара.

+++++++++++++++++
Глобальные опции
+++++++++++++++++

Глобальные опции имеют все те же возможности, что и обычные (не важно, применены они как ссылки или нет). Они также могут участвовать в создании комбинаций и исключений.

++++++++++++++++++++++++++++++++++++++++++++
Добавление, удаление и редактирование опций
++++++++++++++++++++++++++++++++++++++++++++

Если для товара уже были созданы комбинации и исключения, то создание или удаление опций не приведет к их автоматическому пересчету. Для корректной работы рекомендуется переделать добавленные комбинации и исключения.

Это не относится к вариантам опций, которые можно создавать и удалять без ограничений. Это относится именно к опциям.

В случае добавления новой опции, во всех комбинациях исключений эта опция становится в значение *Disregard - Игнорировать*.

+++++++++++++++++++++++++++++++++++++
Типы опций, доступные для исключений
+++++++++++++++++++++++++++++++++++++

Не все опции могут быть в составе комбинаций исключений, а также в составе комбинаций опций). 

Опции типа *Selectbox*, *Radio group* и *Checkbox* используются при составлении исключающих или разрешающих правил.

Опции типа *File*, *Text*, *Textarea* - не могут.

Это связано с тем, что первая группа опций имеет строго определенные значения, по которым можно составить исключающее или разрешающее правило.

Вторая группа опций может иметь совершенно разные значения и составить по ним исключающее правило невозможно.

------------------
Витрина
------------------

Теперь все расчеты цен, изменения картинок, SKU, дополнительной информации о товаре происходит не на уровне JS, а на уровне PHP. 

Создано 2 типа обработки запроса расчета информации о товаре:

* Товары со страницы категории, детальной страницы товара или же пикеров.

* Товары со страницы корзины или модули чекаута, например *Gift registry* или *Wishlist* обрабатывают эти запросы самостоятельно (доп. информацию смотреть в разделе "Взаимодействие с модулями").

Для пользователя, в плане расчетов, ничего не изменилось. Выбираем опцию, происходит перерасчет цен и проч. Исключение составляют последовательные опции: 

Только после выбора первой опции, следующая за ней будет заполнена значениями. До этого будет отображено *n/a*.

=====================================================
Взаимодейтсвие с другими модулями/фукнциональностями
=====================================================

* **Wishlist addon** - был создан новый контроллер ``product.pre.php``. Он обрабатывает входящий запрос, применяя все изменения именно к корзине wishlist и делая перерасчет цен.

* **Product configurator** - был создан новый контроллер ``product.pre.php``. Он обрабатывает входящий запрос, применяя все изменения к конфигурируемому товару и делая перерасчет цен.

* **Gift registry** - был создан новый контроллер ``product.pre.php``. Он обрабатывает входящий запрос, применяя все изменения к товарам в событии и делая перерасчет цен.

* **Buy together** - теперь в пикере, который появляется для выбора доп. опций для товаров в списке, также будут учитываться исключения и последовательные опции.

----------------------
Программная реализация
----------------------

+++
PHP
+++

Все основные вычисления выполняются в файле ``controllers/common/products.post.php``. По входящим данным мы можем определить, производится ли расчет цен для товара в категории (детальной странице или же пикере), либо же для товаров в корзине.

* Для первого типа расчетов все понятно. Получаем информацию о товаре, его выбранные опции, а также опцию, которая была изменена (необходимо для последовательных опций). В функции ``fn_gather_additional_product_data`` мы получаем его новую цену, SKU, картинки и тд. А также получаем новый список опций, учитывая последовательные опции и исключения.

* Второй тип расчетов посложнее. Фукнционал здесь похож на обновление товаров в корзине. Пришла информация, обновили в корзине, вывели для получения результата. Но есть одна загвоздка, при изменении опций у товара в корзине, так же менялись и ``cart_id`` товара, а следовательно и ID всех элементов также менялись, что вызывало ошибку обновления данных (ничего не изменялось для пользователя, хотя опции были изменены). Для этого был введен параметр ``object_id``, при помощи которого мы возвращали в исходное состояние ``cart_id`` товара после его перерасчета.

+++++++
Шаблоны
+++++++

Для того, чтобы нам знать, какие блоки должны быть обновлены, при изменении опций, используется класс ``cm-reload-#ID``, где ID - уникальный ID товара.

Все блоки располагаются в ``common_tempaltes/product_data.tpl``.

**Пример:**

::

  <html>
  <span class="cm-reload-{$obj_prefix}{$obj_id}" id="product_features_update_{$obj_prefix}{$obj_id}">
      <input type="hidden" name="appearance[show_features]" value="{$show_features}" />
      {include file="views/products/components/product_features_short_list.tpl" features=$product.product_id|fn_get_product_features_list|escape no_container=true}
  <!--product_features_update_{$obj_prefix}{$obj_id}--></span>
  </html>

Это означает, что этот блок будет обновлен. Каждый такой блок должен иметь уникальный ID, который обязательно должен заканчиваться на ``_update_#ID``. Постфикс ``_update`` был добавлен для того, чтобы корректно выбирать данные только из обновляемых блоков этого товара, а не все ``input`` элементы на странице.

Поскольку разные шаблоны используют свои стили отображения товара (категории, лейауты, пикеры и тд), и у каждого свои настройки, был введен параметр ``appearance``.

**Пример:**

::

  <html>
  <input type="hidden" name="appearance[show_add_to_cart]" value="{$show_add_to_cart}" />
  </html>

Тем самым, при перерасчете опций мы получим именно те значения этих параметров, которые были использованы для отображения элементов у пользователя. Все параметры в массиве ``appearance`` передадутся в smarty после пересчета показателей товара.

Аналогично дела обстоят с изображениями товара и его доп. картинками. Все картинки или блоки картинок помещаются в отдельные блоки, которые также выводятся после обновления информации о товаре.

При изменении опций все значения *checkbox* в блоке ``cm-reload`` изменяются на ``checked`` и ``unchecked``, чтобы точно знать какие чекбоксы имееются в опциях и какие из них включены или выключены. 

Для того, чтобы значения оставались неизменные, например ``Y`` или ``N``, необходимо к чекбоксу добавить класс ``cm-no-change``. В этом случае, если чекбокс выбран (``checked``), то значение не изменится, в противном случае будет передано пустое значение.

