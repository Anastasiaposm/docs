*************************************************
Если товара нет в наличии, покажем похожие товары
*************************************************

.. contents::
    :local: 
    :depth: 3

Задача
======

Проблема
--------

Бывает так, что товар заканчивается на складе или отсутствует.

Покупатель заходит на страницу товара в надежде купить, а видит «Нет в наличии». 

Покупатель может расстроиться. 


Решение
-------

Мы поможем ему не расстраиваться.

Предложим покупателю аналогичные товары из той же категории или товары за туже цену.


Стандартная функциональность
----------------------------

Платформа CS-Cart и Multi-Vendor позволяет создавать блоки с различным содержимым в любом месте интернет-магазина.

Один из таких блоков — «Товары».

Блок «Товары» имеет различные настройки, например:

*   Шаблоны — различные виды отображения товаров в блоке на витрине (сетка, список, мелкие элементы, скроллер и т.д.).

*   Содержимое — вы можете настроить заполнение блока. Другими словами, отфильтровать товары которые будут отображены в блоке:

    -   Вручную — ручной выбор товаров для отображения

    -   Новые поступления

    -   Недавно просмотрено

    -   Самый популярны

    -   Хиты продаж

Вы можете создать блок «Товары» для детальной страницы товара (карточки товара), который будет отображать последние поступления товаров из той же категории.

В результате, покупатель всегда сможет выбрать похожие товары, если нужного товара нет в наличии.

.. fancybox:: img/blocks_new_settings_37.png
    :alt: Отображение списка товаров  

Однако, стандартная функциональность не позволяет создать особый блок, который будет показан только тогда, когда основного товара нет в наличии. Добавим такую возможность и немного больше.

Что будем делать?
-----------------

1.  Добавим новую настройку «Отобразить блок, если основного товара нет на складе» для блока «Товары». Данная настройка будет работать, если блок размещён на странице (карточке) товара. Блок будет показан, если товара нет на складе. 

    .. fancybox:: img/blocks_new_settings_23.png
        :alt: Отображение списка товаров     

2.  Добавим новый тип заполнения блока: **Похожие товары** 

    Данный тип будет иметь две настройки:

    *   **Диапазон цены в %** — можно создать блок с товарами близкими по стоимости.

    *   **Аналогичная категория** — отобразить товары из той же категории.

    .. fancybox:: img/blocks_new_settings_35.png
        :alt: Отображение списка товаров    


Плюс
----

Можно использовать все возможности блока «Товары» и расположить блок в любом месте. Когда покупатель зайдёт на страницу товара, которого в настоящий момент нет на складе, он увидит похожие товары.

Новые настройки можно будет использовать вместе или раздельно для любых продуктовых блоках. Например, создать простой блок «Похожие товары», который будет отображаться всегда.

Подготовка
==========

Создадим новый блок для страницы товара
---------------------------------------

1.  Создадим новый блок с названием «Похожие товары» для страницы товара.

    .. fancybox:: img/blocks_new_settings_01.png
        :alt: Отображение списка товаров

    .. fancybox:: img/blocks_new_settings_02.png
        :alt: Отображение списка товаров

    .. fancybox:: img/blocks_new_settings_03.png
        :alt: Отображение списка товаров

    .. fancybox:: img/blocks_new_settings_04.png
        :alt: Отображение списка товаров

    .. fancybox:: img/blocks_new_settings_05.png
        :alt: Отображение списка товаров

    .. fancybox:: img/blocks_new_settings_06.png
        :alt: Отображение списка товаров

    .. fancybox:: img/blocks_new_settings_07.png
        :alt: Отображение списка товаров

    .. fancybox:: img/blocks_new_settings_08.png
        :alt: Отображение списка товаров

    .. fancybox:: img/blocks_new_settings_09.png
        :alt: Отображение списка товаров    

2.  Проверяем результат на витрине

    .. fancybox:: img/blocks_new_settings_10.png
        :alt: Отображение списка товаров   

    Блок «Похожие товары» появился. Так как мы использовали стандартные настройки, то он отображается всегда и показывает товары из всех категорий. 

Отключим кэш блоков на время разработки
---------------------------------------

Все блоки кэшируются, кэшируются очень хорошо (шаблоны и php скрипты) и это помогает сильно ускорить загрузку страницы. 

Отключим кэширование блоков на время разработки.

1.  Откройте файл **config.local.php** в основном каталоге интернет-магазина на веб-сервере.

2.  Найдите строчку::

        'disable_block_cache' => false, // used to disable block cache

3.  Замените на::

        'disable_block_cache' => true, // used to disable block cache

4.  Удалите папку ``var/cache``, чтобы полностью удалить старый кэш.

Всё.


Анализ и планирование модификации
=================================

Мы будем модифицировать блок «Товары». Данный блок имеет:

1.  PHP Схему блока — описывает свойства и настройки блока.

2.  PHP функцию — которая получает товары для отображения.

3.  Smarty шаблон — отображает товары на витрине.

Нам нужно добавить новые настройки, значит нужна схема.

Нам нужно изменить выборку (получение) товаров, значит нужна Php функция, которая эти товары получает.

Нам не нужно изменять дизайн, поэтому мы не будем трогать Smarty шаблоны. 

Найдём php схему блока «Товары»
-------------------------------

Все схемы платформы расположены в папке:

``/app/schemas``

Cхемы связанные с блоками расположены в папке:

``/app/schemas/block_manager``

Главные схемы блоков хранятся в файле:

``/app/schemas/block_manager/blocks.php``    

1.  Откройте файл **/app/schemas/block_manager/blocks.php** и найдите схему блока «Товары».

    —   Как определить какая схема нужна?

    —   Логически, исходя из типа блока.

    —   Есть более точный способ? 

    —   Да. Откройте окно создания нового блока в панели администратора. В коде блока «Товары» указан его тип:

        ``<input type="hidden" name="block_data[type]" value="products">``

        .. fancybox:: img/blocks_new_settings_12.png
            :alt: Отображение списка товаров     

2.  Рассмотрим схему которая отвечает за товарный блок:

    .. literalinclude:: files/schema.php
        :emphasize-lines: 1,6,9,17

    Значения которые нам понадобятся:

    .. list-table::
        :header-rows: 1
        :widths: 10 30

        *   -   Ключ

            -   Значение

        *   -   ``items_function``

            -   Функция которая получает товары для отображения в блоке: ``fn_get_products`` .

        *   -   ``fillings``

            -   Список видов заполнения (фильтров) товаров в блоке. Содержат параметры, которые передаются в функцию для получения товаров

                *   ``manually`` — Вручную

                *   ``newest`` — Новые поступления

                *   ``recent_products`` — Недавно просмотрено

                *   ``most_popular`` — Самый популярный

        *   -   ``settings``

            -   Настройки блока. 

                ``hide_add_to_cart_button`` — настройка "Спрятать кнопку добавления товара в корзину"

Схема найдена.


Найдём php функцию которая получает товары для блока
----------------------------------------------------

Функция указана ячейке ``items_function`` схемы блока. В нашем случае ``fn_get_products``.

Все основные функции платформы находятся в папке:

``app/functions/``

Наша функция работает с товарами, значит лежит в файле:

``app/functions/fn.catalog.php``

1.  Открываем файл **app/functions/fn.catalog.php** и находим функцию ``fn_get_products``.

    .. literalinclude:: files/fn_get_products_1.php

2.  Добавим в начале функции ``fn_print_r($params);`` для проверки и перезагрузим страницу товара.

    .. literalinclude:: files/fn_get_products_2.php

    .. fancybox:: img/blocks_new_settings_15.png
        :alt: Отображение списка товаров  

    Как видите в функции ``fn_get_products`` доступны все параметры и настройки продуктового блока.

3.  В самом начале функции находится хук:

    .. literalinclude:: files/fn_get_products_3.php

    Это значит, что мы можем внести изменения в работу функции с помощью модуля. 

    .. note::

        Функция ``fn_get_products`` используется для получения товаров в различных блоках, странице категории, странице поиска и фильтра. Поэтому очень важно не вмешиваться в её работу на прямую.

Однако данная функция нам не поможет скрыть блок, если товар есть на складе. Другими словами, мы можем расширить её работу и повлиять на товары которые будут в блоке, но не сможем выключить блок полностью.

Будем искать глубже, найдём место где это функция выполняется, возможно там можно выключить блок.

Найдём место где подключаются блоки и функции блоков
----------------------------------------------------

Будем отталкиваться от цели. Найдём место, где включаются и выключаются блоки.

Функция получения товаров в блоке определяется в параметре ``items_function`` схемы блока, логично найти место где используется этот параметр в ядре. 

Искать будем в папках с функциями и классами ядра платформы:

*   **app/functions** — функции платформы

*   **app/Tygh** — классы платформы

1.  Сделаем поиск по содержимому файлов, с помощью текстового редактора или файлового менеджера.

    В папке **app/functions** не встречается ``items_function``

    Поищем в папке **app/Tygh**. 

    Найден один файл: **app/Tygh/BlockManager/Block.php**

2.  Открываем файл **app/Tygh/BlockManager/Block.php**.

    ``items_function`` используется в функции ``getItems`` класса ``Blocks``. 

    К сожалению, данная функция не имеет хуков, поэтому мы не сможем перехватить выполнение функции.

    Будем искать глубже.

3.  Найдем место где выполняется функция ``getItems``. В этом же файле данная функция не выполняется, поэтому ищем в других.

    Искать начнём в той же папке: **app/Tygh/BlockManager/** .

    Найден один файл **app/Tygh/BlockManager/RenderManager.php** .

4.  Открываем файл **app/Tygh/BlockManager/RenderManager.php** и находим место выполнения функции ``getItems``.

    Это функция ``getValue`` класса ``RenderManager`` со следующим кодом:

    .. literalinclude:: files/BlockManager.1.php

    Хуков опять нет. Ищем дальше. Искать начинаем с этого же файла.

5.  Делаем поиск по файлу **RenderManager.php** и находим.

    Находим хук прямо перед выполнением функции ``getValue``.

    .. literalinclude:: files/BlockManager.2.php

    Отлично, есть хук, в котором есть параметры блока. Однако раз мы зашли далеко, углубимся ещё чуть чуть.

6.  Функция ``getValue`` выполняется в функции ``renderBlockContent`` , которая содержит ещё один хук:

    .. literalinclude:: files/BlockManager.3.php

    Судя по названию данный хук выполняется перед активацией кэша блока. Идём дальше.

7.  Найдём в этом же файле место где выполняется функция ``renderBlockContent``.

    Находится функция ``renderBlock``, которая не содержит хуков. Ищем где выполняется данная функция.

8.  **Удача!** Находится функция ``renderBlocks`` , которая выполняет ``renderBlock`` в цикле по всем блокам и перед выполнением содержит хук.

    .. literalinclude:: files/BlockManager.4.php

    В этом маленьком кусочке кода, так много полезного:

    а.  Хук с информацией о блоке.

    б.  Условие «Если блок выключен, то пропускаем» после хука. 

    Это значит, что можно модулем изменить ``$block['status']`` и тем самым выбирать, когда показывать блок, а когда нет.

9.  Проверям, добавив ``fn_print_r($block);`` после хука ``'render_blocks'`` .

    .. literalinclude:: files/BlockManager.5.php

    Смотрим результат на странице товара в браузере:

    .. fancybox:: img/blocks_new_settings_21.png
        :alt: Отображение списка товаров  

    Распечатаются все блоки, однако найти наш легко по названию.

10. Отлично, нужный хук найден. Убираем ``fn_print_r($block);``.


Итоги анализа
-------------

1.  Мы нашли схему которая отвечает за работу блока «Товары» и с помощью которой у блока появляются настройки.

    Нужная схема расположена в файле **app/schemas/block_manager/blocks.php**

    Мы будем расширять данную схему с помощью модуля, чтобы добавить новые настройки и тип заполнения.

2.  Мы нашли функцию ``fn_get_products`` которая получает товары для блока.

    Данная функция содержит хук, который нам пригодится, чтобы добавить повлиять на отображение товаров в блоке.

    ::  

        fn_set_hook('get_products_pre', $params, $items_per_page, $lang_code);

3.  Мы нашли функцию которая подключает блоки и хук в ней

    ::

        fn_set_hook('render_blocks', $grid, $block, $this, $content);

    С помощью данного хука мы будем включать и выключать блок, в зависимости от наших условий.


Приступаем к расширению функционала.

Модификация
===========

Всю разработку будем выполнять с помощью модуля «Мои изменения».

ID модуля — **my_changes**.

Расширим схему блока «Товары»
-----------------------------

Добавим новую настройку «Отобразить блок, если основного товара нет на складе».

Мы выяснили, что схема расположена в файле **app/schemas/block_manager/blocks.php**. 

Для расширения схем с помощью модуля нам нужно сделать аналогичную структуру в папке модуля:

.. list-table::
    :widths: 10 30

    *   -   Основная схема

        -   **app/schemas/block_manager/blocks.php**

    *   -   Расширение

        -   **app/addons/[ID_модуля]/schemas/block_manager/blocks.post.php**

Всё очень логично.

1.  Откройте папку **app/addons/my_changes**. 

    Создайте в ней папку **schemas** для расширения схем и пройдите в неё.

    Создайте папку **block_manager** для расширения схем менеджера блоков.

    Создайте файл **blocks.post.php**, где **.post** означает что файл будет запущен после основной схемы.

    В результате у нас получился файл:

    **app/addons/my_changes/schemas/block_manager/blocks.post.php**

2.  Наша цель подключится и проверить работу.

    Откройте только что созданный файл **blocks.post.php** и вставьте проверочный код. 

    .. literalinclude:: files/blocks.post.1.php   

    Установите и включите модуль «Мои изменения». 

    Проверьте результат подключения к схеме в браузере на странице товара.

    .. fancybox:: img/blocks_new_settings_17.png
        :alt: Отображение списка товаров   

    На экране распечатается контрольная фраза и схема продуктового блока.

    Отлично!

3.  Расширим схему, добавив новую настройку. 

    Настройки хранятся в ячейке ``settings`` схемы блока, в настоящий момент там только одна настройка ``hide_add_to_cart_button``. Склонируем её изменив ключ.

    Добавим в схему новую настройку ``if_out_of_stock``.

    .. literalinclude:: files/blocks.post.2.php

    Я просто скопировал ``hide_add_to_cart_button`` из основной схемы **blocks.php**

    Проверяем в браузере:

    .. fancybox:: img/blocks_new_settings_18.png
        :alt: Отображение списка товаров  

    Ячейка ``settings`` расширилась и появилась ещё одна настройка. 

    Настройка должна появится в настройках блока в панели администратора.

4.  Проходим в настройки блока «Товары» в панели администратора. Обязательно уберите ``fn_print_r`` из модуля.

    .. fancybox:: img/blocks_new_settings_19.png
        :alt: Отображение списка товаров  

    Настройка появилась, однако:

    а.  Нет языковой переменной и соответственно не отображается название. 

    б.  Она включена по умолчанию. Данная настройка будет скрывать блок, если товар есть в наличии, а это нужно не всегда.

5.  Сделаем так, чтобы настройка была выключена по умолчанию, установим ``'default_value' => 'N'`` в расширении схемы.

    .. literalinclude:: files/blocks.post.3.php
        :emphasize-lines: 5

6.  Добавим новую языковую переменную ``if_out_of_stock`` для новой настройки.

    Языковую переменную будем добавлять с помощью модуля который выполняет расширение. 

    Откройте файл **app/addons/my_changes/addon.xml**

    Добавьте следующий код:

    .. literalinclude:: files/addon.1.xml


    .. note::

        Переводы модулей устанавливаются при установке модуля. Для обновления, нужно переустановить модуль.

7.  Переустановите модуль и проверьте результат в настройках модуля.

    .. fancybox:: img/blocks_new_settings_20.png
        :alt: Отображение списка товаров  

    Отлично! Правильное название настройки появилось.

Заставим настройку работать. 


Расширим функцию с помощью хука
-------------------------------

Мы сделали новую настройку. Теперь нужно добавить функционал для настройки.

Наша цель выключить блок, до тех пор пока товар не закончится на складе. 

Мы нашли функцию которая связана с обработкой блоков и имеет хук

::

    fn_set_hook('render_blocks', $grid, $block, $this, $content);

Каждый хук в php имеет:

*   ``render_blocks`` — название хука.

*   ``$grid, $block, $this, $content`` — переменные доступные для использования и расширения.

Подключимся к данному хуку с помощью модуля.

1.  Необходимо активировать подключение к хуку в модуле. 

    Создайте новый файл:

    **app/addons/my_changes/init.php**

    Вставьте код активации хука:

    .. literalinclude:: files/init.php
        :emphasize-lines: 6

    Как вы можете заметить, мы передали название хука в функцию ``fn_register_hooks`` . Можно активировать несколько хуков, если это требуется, перечислив их названия через запятую.

2.  Создадим функцию, которая подключится к хуку и позволит выполнить новый php код.

    Создайте новый файл:

    **app/addons/my_changes/func.php** 

    Создайте в нём специальную функцию.

    Принцип создания функций для подключения к PHP хукам в таблице.

    .. list-table::
        :widths: 10 30

        *   -   Хук

            -   ``fn_set_hook('[название_хука]', [переменная_1], [переменная_2]);``

        *   -   Шаблон 

            -   ``fn_[id_модуля]_[название_хука] ([переменная_1], [переменная_2])``
            
    Так как нам нужно подключится к хуку:

    ``fn_set_hook('render_blocks', $grid, $block, $this, $content);``

    То нужно создать функцию:

    ``fn_my_changes_render_blocks($grid, &$block, $this, $content)``

3.  Получаем такой код в файле **app/addons/my_changes/func.php** :

    .. literalinclude:: files/func.1.php

    Добавляем ``fn_print_r($block['name']);`` для проверки подключения и проверяем в браузере.

    .. fancybox:: img/blocks_new_settings_22.png
        :alt: Отображение списка товаров 

    На экране распечатались названия блоков. Хук работает!

4.  Добавим условие, чтобы отображать информацию только о нужном блоке и отобразим всё содержимое ``$block``.

    .. literalinclude:: files/func.2.php

5.  Включим новую настройку в панели администратора.

    .. fancybox:: img/blocks_new_settings_23.png
        :alt: Отображение списка товаров  

    Проверяем результат на витрине.

    .. fancybox:: img/blocks_new_settings_24.png
        :alt: Отображение списка товаров  

    В результате мы видим:

    *   Новую настройку и её значение.

    *   ID товара в настоящий момент.

    *   Локацию (тип страницы) на витрине. 

6.  Добавим логику в расширение хука. 

    Для начала, сделаем так:

    *   Если открыта витрина, а не панель администратора.

    *   Если у блока есть наша настройка, то блок всегда скрыт.

    *   Если это страница товара, то распечатаем количество товара. 

    .. literalinclude:: files/func.3.php

    Проверяем.

    .. fancybox:: img/blocks_new_settings_25.png
        :alt: Отображение списка товаров  

    Количесто товара на складе есть, блока нет. Отлично. 

7.  Сделаем так, чтобы блок включался, если товара нет в наличии.

    Для этого добавим два условия:

    *   Если количество товара меньше или равно нуля.

    *   Если товар имеет статус «Скрытый»

    Если условия проходят, то ставим блоку статус «Активный».

    .. literalinclude:: files/func.4.php 
        :emphasize-lines: 24-26

8.  Проверяем. 

    Ставим для тестового товара 0 на складе и смотрим товар на витрине.

    .. list-table::
        :header-rows: 1
        :widths: 30 30

        *   -   Есть на складе

            -   Нет на складе

        *   -   .. fancybox:: img/blocks_new_settings_27.png
                    :alt: Отображение списка товаров  

            -   .. fancybox:: img/blocks_new_settings_26.png
                    :alt: Отображение списка товаров  

Успех! Новая настройка блока работает по нашим условиям и правилам.


Добавим новые типы заполнения в схему для блока «Товары»
--------------------------------------------------------

Добавим новый тип заполнения: **Похожие товары** 

Данный тип будет иметь четыре настройки:

*   Аналогичная категория

*   Учитывать подкатегории

*   Диапазон цены в % 

*   Лимит — количество товаров в блоке


1.  Откройте файл расширяющий схему блока 

    **app/addons/my_changes/schemas/block_manager/blocks.post.php**

    Распечатайте схему продуктового блока: ``fn_print_r($schema['products']);``

    .. fancybox:: img/blocks_new_settings_28.png
        :alt: Отображение списка товаров  

    Типы заполнения описаны в ячейке ``fillings`` .

    Распечатайте только её

    ::

        fn_print_r($schema['products']['content']['items']['fillings']);


    .. fancybox:: img/blocks_new_settings_29.png
        :alt: Отображение списка товаров      

    Нам нужно добавить аналогичный тип со своим названием и условиями.

2.  Расширим схему, добавив новый тип ``similar_products``

    .. literalinclude:: files/blocks.post.5.php
        :emphasize-lines: 8-15

    Чтобы создать новый, был скопирован тип ``recent_products``, и убрано всё лишнее.

    Для типа будет доступен один параметр ``main_product_id``, значение которого будет соответствовать ``product_id`` товара на странице которого расположен блок. Возможно это пригодится, пока оставим. 

    Проверим в настройках блока.

    .. fancybox:: img/blocks_new_settings_30.png
        :alt: Отображение списка товаров   

    Новый тип пока не содержит настроек, сейчас мы их добавим. 

3.  Настройки типов заполнения хранятся в схеме **app/schemas/block_manager/fillings.php** 

    Расширим её в нашем модуле аналогично расширению схемы **blocks.php**

    Создайте новый файл:

    **app/addons/my_changes/schemas/block_manager/fillings.post.php** 

    Добавьте новые настройки для типа заполнения ``similar_products``:

    .. literalinclude:: files/fillings.post.1.php

    .. note::

        Аналогичный принцип расширения реализован в модуле «Хиты продаж» (bestsellers)

4.  Проверяем результат в настройках блока

    .. fancybox:: img/blocks_new_settings_34.png
        :alt: Отображение списка товаров 

    .. note::

        Может понадобится грубая очистка кэша, удалением папки **var/cache**

5.  Создаём три новые языковые переменные для модуля «Мои изменения»

    Откройте файл **app/addons/my_changes/addon.xml**

    Добавьте следующий код:

    .. literalinclude:: files/addon.2.xml

    Переустановите модуль и проверьте результат.

    .. fancybox:: img/blocks_new_settings_35.png
        :alt: Отображение списка товаров 

Отлично! Мы добавили новый тип заполнения. 

Сохраняем настройки блока и переходим на витрину. Нужно заставить блок отображать товары в соответствии с новым типом заполнения.


Расширим функцию получения товаров для работы с новыми типами отображения
-------------------------------------------------------------------------

Мы добавили новые настройки блоку «Товары», добавим логику для их правильной работы.

Ранее мы нашли функцию ``fn_get_products`` которая получает товары для блока. 

Данная функция имеет хуки, поэтому мы сможем расширить функцию с помощью модуля.

Мы подключимся к хуку в функции и добавим функционал для фильтрации «Похожих товаров» учитывая новые настройки.

Нужная нам функция (``fn_get_products``) расположена в файле **app/functions/fn.catalog.php**.

1.  Откроем файл **app/functions/fn.catalog.php** и найдём функцию ``fn_get_products``. 

    В самом начале функции есть хук:

    .. literalinclude:: files/fn_get_products_3.php   

    Подключимся к данному хуку. 

2.  Откройте файл **app/addons/my_changes/init.php** и добавьте название хука в функцию активации.

    .. literalinclude:: files/init.2.php
        :emphasize-lines: 7

    Названия хуков, которые будут использованы в модуле, перечисляются через запятую.

3.  Откройте файл **app/addons/my_changes/func.php** и добавьте функцию для подключения к хуку:

    .. literalinclude:: files/func.5.php

    Также добавлена ``fn_print_r($params);`` для проверки и просмотра массива ``$params``.

    Проверяем результат на странице товара.

    .. fancybox:: img/blocks_new_settings_33.png
        :alt: Отображение списка товаров 

    Отлично! Мы можем использовать в хуке новые настройки и изменить логику получения товаров для блока.

4.  В первую очередь добавим:

    *   Так как хуки срабатывают всегда, когда выполняется функция ``fn_get_products`` , нужно добавить проверку, что это именно блок «Похожие товары»

    *   Если блок отображается, значит текущего товара нет в наличии, поэтому мы исключим ID текущего товара из запроса.


    .. literalinclude:: files/func.6.php


    Если вы посмотрите на функцию ``fn_get_products``, то заметите её гибкость. 

    Функция по частичкам собирает запрос к базе данных исходя из переменной ``$params``. Нам достаточно указать правильные параметры и на выходе мы получим нужные товары.

    Например, часть функции ``fn_get_products``

    ::

        if (!empty($params['exclude_pid'])) {
            $condition .= db_quote(' AND products.product_id NOT IN (?n)', $params['exclude_pid']);
        }

    Если добавить ID товаров в параметр ``$params['exclude_pid']``, то данные товары будут исключены.

5.  Добавим обработку для настройки «Аналогичная категория»

    .. literalinclude:: files/func.7.php

    Проверяем.

    .. list-table::
        :header-rows: 1
        :widths: 30 30

        *   -   Было

            -   Стало

        *   -   .. fancybox:: img/blocks_new_settings_36.png
                    :alt: Отображение списка товаров  

            -   .. fancybox:: img/blocks_new_settings_37.png
                    :alt: Отображение списка товаров  

    Настройка работает.

6.  Добавим логику для настройки «Диапазон цены».

    .. literalinclude:: files/func.8.php

    Проверяем.

    .. list-table::
        :header-rows: 1
        :widths: 30 30

        *   -   Было

            -   Стало

        *   -   .. fancybox:: img/blocks_new_settings_37.png
                    :alt: Отображение списка товаров  

            -   .. fancybox:: img/blocks_new_settings_38.png
                    :alt: Отображение списка товаров  

    Как видите, отобразился только товар с такой же ценой. 

    К сожалению, в моём примере используется всего несколько товаров и одна категория, однако это будет отлично работать везде.

7.  Добавим самое важное условие. Показывать в блоке только товары которые есть на складе.

    ::  

        // Отображать товары с количеством больше 1
        $params['amount_from'] = 1 ;

8.  В результате у нас получилась такая функция:

    .. literalinclude:: files/func.9.php


Всё! Модуль готов и настройки блока готовы.

Включите кэш блоков
-------------------

1.  Откройте файл **config.local.php** в основном каталоге интернет-магазина на веб-сервере.

2.  Найдите строчку::

        'disable_block_cache' => true, // used to disable block cache

3.  Замените на::

        'disable_block_cache' => false, // used to disable block cache



Результат
=========

Что сделали
-----------

Мы сделали с помощью модуля:

1.  Новую настройку для блока «Отобразить блок, если основного товара нет на складе»

    .. fancybox:: img/blocks_new_settings_23.png
        :alt: Отображение списка товаров      

2.  Новый тип заполнения содержимого блока — «Похожие товары» и три новые настройки для него.

    «Похожие товары» можно настраивать с помощью трёх настроек:

    *   Диапазон цены в процентах.

    *   Аналогичная категория.

    *   Учитывать подкатегории.
   
    .. fancybox:: img/blocks_new_settings_35.png
        :alt: Отображение списка товаров     


Новые возможности
-----------------

1.  Вы можете добавить блок «Похожие товары» на страницу товаров и настроить критерии схожести.

2.  Вы можете показывать любые товары, если основного товара нет в наличии.

.. fancybox:: img/blocks_new_settings_37.png
    :alt: Отображение списка товаров  
 
